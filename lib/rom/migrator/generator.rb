# encoding: utf-8

require "erb"

class ROM::Migrator

  require_relative "generator/binding"

  # Scaffolds next migration from name and paths to existing migrations
  #
  # Uses the migrator to define the next migration number and
  # adapter-specific template
  #
  # @api private
  #
  # @author nepalez <andrew.kozin@gmail.com>
  #
  class Generator

    include ROM::Options

    option :path,   reader: true, type: String, required: true
    option :klass,  reader: true, type: String, required: true
    option :number, reader: true

    # @!attribute [r] migrator
    #
    # @return [ROM::Migrator] decorated migrator object
    #
    attr_reader :migrator

    # Generates new migration it the corresponding folder using default template
    #
    # @param  (see #initialize)
    # @option (see #initialize)
    #
    # @return (see #call)
    #
    def self.call(migrator, options)
      new(migrator, options).call
    end

    # @!method initialize(options)
    # Initializes the generator
    #
    # @param [ROM::Migrator] migrator
    # @param [Hash] options
    #
    # @option options [Array<String>] :path
    #   The path to folder where migration should be created.
    #   The first of migrator's [#paths] will be used by default.
    # @option options [String] :klass
    #   The name of the migration klass.
    #   The camelized value will be send to template along with adapter.
    #   It is also used to provide the relative path to template from
    #   the target folder.
    # @option options [String] :number
    #   The forced number of the migration.
    #   If the number is not set, it will be generated by migrator
    #   using [#next_migration_number] counter and last number of migrations
    #   from +:paths+
    #
    def initialize(migrator, options)
      super(options)
      @migrator = migrator
      @klass    = Functions.fetch(:up)[@klass]
    end

    # Generates new migration it the corresponding folder using default template
    #
    # @return [self] itself
    #
    def call
      with_logging_for file.path do |file_path|
        FileUtils.mkdir_p Pathname.new(file_path).dirname
        File.new(file_path, "w").write(content)
      end
    end

    private

    def with_logging_for(fp)
      logger = migrator.logger
      yield(fp)
      logger.info "New migration created at '#{fp}'"
      fp
    end

    def file
      MigrationFile.new(root: path, klass: klass, number: new_number)
    end

    def new_number
      number || migrator.next_migration_number(last_existing_number)
    end

    def last_existing_number
      existing_migration_files.last_number
    end

    def existing_migration_files
      MigrationFiles.from(migrator.paths)
    end

    def content
      ERB.new(template).result Binding[klass]
    end

    def template
      File.read(migrator.template)
    end

  end # class Generator

end # class ROM::Migrator
